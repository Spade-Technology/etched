/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SignatureVerifier {
  export type EncodedMessageStruct = {
    blockNumber: BigNumberish;
    nodeAddress: AddressLike;
  };

  export type EncodedMessageStructOutput = [
    blockNumber: bigint,
    nodeAddress: string
  ] & { blockNumber: bigint; nodeAddress: string };

  export type SignatureStruct = {
    encodedMessage: BytesLike;
    messageHash: BytesLike;
    signature: BytesLike;
    signer: AddressLike;
  };

  export type SignatureStructOutput = [
    encodedMessage: string,
    messageHash: string,
    signature: string,
    signer: string
  ] & {
    encodedMessage: string;
    messageHash: string;
    signature: string;
    signer: string;
  };
}

export interface $SignatureVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "$checkMessageValidity"
      | "$getEthSignedMessageHash"
      | "$getMessageHash"
      | "__hh_exposed_bytecode_marker"
      | "checkSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "$checkMessageValidity",
    values: [SignatureVerifier.EncodedMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "$getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "$getMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "__hh_exposed_bytecode_marker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [SignatureVerifier.SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "$checkMessageValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__hh_exposed_bytecode_marker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
}

export interface $SignatureVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): $SignatureVerifier;
  waitForDeployment(): Promise<this>;

  interface: $SignatureVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  $checkMessageValidity: TypedContractMethod<
    [_encodedMessage: SignatureVerifier.EncodedMessageStruct],
    [boolean],
    "view"
  >;

  $getEthSignedMessageHash: TypedContractMethod<
    [_messageHash: BytesLike],
    [string],
    "view"
  >;

  $getMessageHash: TypedContractMethod<[_data: BytesLike], [string], "view">;

  __hh_exposed_bytecode_marker: TypedContractMethod<[], [string], "view">;

  checkSignature: TypedContractMethod<
    [_signature: SignatureVerifier.SignatureStruct],
    [SignatureVerifier.EncodedMessageStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "$checkMessageValidity"
  ): TypedContractMethod<
    [_encodedMessage: SignatureVerifier.EncodedMessageStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "$getEthSignedMessageHash"
  ): TypedContractMethod<[_messageHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "$getMessageHash"
  ): TypedContractMethod<[_data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "__hh_exposed_bytecode_marker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkSignature"
  ): TypedContractMethod<
    [_signature: SignatureVerifier.SignatureStruct],
    [SignatureVerifier.EncodedMessageStructOutput],
    "view"
  >;

  filters: {};
}
