/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SignatureVerifier {
  export type EncodedMessageStruct = {
    blockNumber: BigNumberish;
    nodeAddress: AddressLike;
  };

  export type EncodedMessageStructOutput = [
    blockNumber: bigint,
    nodeAddress: string
  ] & { blockNumber: bigint; nodeAddress: string };

  export type SignatureStruct = {
    encodedMessage: BytesLike;
    messageHash: BytesLike;
    signature: BytesLike;
    signer: AddressLike;
  };

  export type SignatureStructOutput = [
    encodedMessage: string,
    messageHash: string,
    signature: string,
    signer: string
  ] & {
    encodedMessage: string;
    messageHash: string;
    signature: string;
    signer: string;
  };
}

export interface $TeamsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "$__unsafe_increaseBalance"
      | "$_afterTokenTransfer"
      | "$_approve"
      | "$_baseURI"
      | "$_beforeTokenTransfer"
      | "$_burn"
      | "$_checkOwner"
      | "$_exists"
      | "$_isApprovedOrOwner"
      | "$_mint"
      | "$_msgData"
      | "$_msgSender"
      | "$_ownerOf"
      | "$_owners"
      | "$_requireMinted"
      | "$_safeMint(address,uint256,bytes)"
      | "$_safeMint(address,uint256)"
      | "$_safeTransfer(address,address,uint256,bytes)"
      | "$_safeTransfer(address,address,uint256)"
      | "$_setApprovalForAll"
      | "$_transfer"
      | "$_transferOwnership"
      | "$checkMessageValidity"
      | "$getEthSignedMessageHash"
      | "$getMessageHash"
      | "__hh_exposed_bytecode_marker"
      | "_nodes"
      | "addNode"
      | "approve"
      | "balanceOf"
      | "checkSignature"
      | "createTeam"
      | "delegateCallsToSelf"
      | "getApproved"
      | "getNumberOfTeamsCreated"
      | "getParent"
      | "hasPermission"
      | "isApprovedForAll"
      | "isNode"
      | "name"
      | "onERC721Received"
      | "organisationOf"
      | "organisations"
      | "owner"
      | "ownerOf"
      | "permissionsOfTeam"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setPermission"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "transferToOrganisation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "OwnershipTransferred"
      | "PermissionsUpdated"
      | "TeamCreated"
      | "Transfer"
      | "TransferToOrganisation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "$__unsafe_increaseBalance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_afterTokenTransfer",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "$_baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "$_beforeTokenTransfer",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_burn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_checkOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "$_exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_isApprovedOrOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "$_msgData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "$_msgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "$_ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_requireMinted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_safeMint(address,uint256,bytes)",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "$_safeMint(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_safeTransfer(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "$_safeTransfer(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_setApprovalForAll",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "$_transfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "$_transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "$checkMessageValidity",
    values: [SignatureVerifier.EncodedMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "$getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "$getMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "__hh_exposed_bytecode_marker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_nodes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "addNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [SignatureVerifier.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createTeam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateCallsToSelf",
    values: [SignatureVerifier.SignatureStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfTeamsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getParent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isNode", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organisationOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "organisations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionsOfTeam",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToOrganisation",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "$__unsafe_increaseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_afterTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "$_approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "$_baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "$_beforeTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "$_burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "$_checkOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "$_exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "$_isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "$_mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "$_msgData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "$_msgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "$_ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "$_owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "$_requireMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_safeMint(address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_safeMint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_safeTransfer(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_safeTransfer(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "$_transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "$_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$checkMessageValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__hh_exposed_bytecode_marker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateCallsToSelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfTeamsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organisationOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organisations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissionsOfTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToOrganisation",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionsUpdatedEvent {
  export type InputTuple = [
    teamId: BigNumberish,
    account: AddressLike,
    newPermission: BigNumberish
  ];
  export type OutputTuple = [
    teamId: bigint,
    account: string,
    newPermission: bigint
  ];
  export interface OutputObject {
    teamId: bigint;
    account: string;
    newPermission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamCreatedEvent {
  export type InputTuple = [teamId: BigNumberish, to: AddressLike];
  export type OutputTuple = [teamId: bigint, to: string];
  export interface OutputObject {
    teamId: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToOrganisationEvent {
  export type InputTuple = [teamId: BigNumberish, orgId: BigNumberish];
  export type OutputTuple = [teamId: bigint, orgId: bigint];
  export interface OutputObject {
    teamId: bigint;
    orgId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface $Teams extends BaseContract {
  connect(runner?: ContractRunner | null): $Teams;
  waitForDeployment(): Promise<this>;

  interface: $TeamsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  $__unsafe_increaseBalance: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  $_afterTokenTransfer: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      firstTokenId: BigNumberish,
      batchSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  $_approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  $_baseURI: TypedContractMethod<[], [string], "view">;

  $_beforeTokenTransfer: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      firstTokenId: BigNumberish,
      batchSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  $_burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  $_checkOwner: TypedContractMethod<[], [void], "view">;

  $_exists: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  $_isApprovedOrOwner: TypedContractMethod<
    [spender: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  $_mint: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  $_msgData: TypedContractMethod<[], [string], "view">;

  $_msgSender: TypedContractMethod<[], [string], "view">;

  $_ownerOf: TypedContractMethod<[teamId: BigNumberish], [string], "view">;

  $_owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  $_requireMinted: TypedContractMethod<[tokenId: BigNumberish], [void], "view">;

  "$_safeMint(address,uint256,bytes)": TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  "$_safeMint(address,uint256)": TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "$_safeTransfer(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "$_safeTransfer(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  $_setApprovalForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  $_transfer: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  $_transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  $checkMessageValidity: TypedContractMethod<
    [_encodedMessage: SignatureVerifier.EncodedMessageStruct],
    [boolean],
    "view"
  >;

  $getEthSignedMessageHash: TypedContractMethod<
    [_messageHash: BytesLike],
    [string],
    "view"
  >;

  $getMessageHash: TypedContractMethod<[_data: BytesLike], [string], "view">;

  __hh_exposed_bytecode_marker: TypedContractMethod<[], [string], "view">;

  _nodes: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  addNode: TypedContractMethod<[node: AddressLike], [void], "nonpayable">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  checkSignature: TypedContractMethod<
    [_signature: SignatureVerifier.SignatureStruct],
    [SignatureVerifier.EncodedMessageStructOutput],
    "view"
  >;

  createTeam: TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;

  delegateCallsToSelf: TypedContractMethod<
    [signature: SignatureVerifier.SignatureStruct, _calldata: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getNumberOfTeamsCreated: TypedContractMethod<[], [bigint], "view">;

  getParent: TypedContractMethod<[], [string], "view">;

  hasPermission: TypedContractMethod<
    [teamId: BigNumberish, user: AddressLike, permission: BigNumberish],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isNode: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  organisationOf: TypedContractMethod<[team: BigNumberish], [bigint], "view">;

  organisations: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  permissionsOfTeam: TypedContractMethod<
    [team: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setPermission: TypedContractMethod<
    [teamId: BigNumberish, user: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferToOrganisation: TypedContractMethod<
    [teamId: BigNumberish, orgId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "$__unsafe_increaseBalance"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_afterTokenTransfer"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      firstTokenId: BigNumberish,
      batchSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "$_beforeTokenTransfer"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      firstTokenId: BigNumberish,
      batchSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "$_checkOwner"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "$_exists"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "$_isApprovedOrOwner"
  ): TypedContractMethod<
    [spender: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "$_mint"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_msgData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "$_msgSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "$_ownerOf"
  ): TypedContractMethod<[teamId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "$_owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "$_requireMinted"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "$_safeMint(address,uint256,bytes)"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_safeMint(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_safeTransfer(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_safeTransfer(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_setApprovalForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_transfer"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "$_transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "$checkMessageValidity"
  ): TypedContractMethod<
    [_encodedMessage: SignatureVerifier.EncodedMessageStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "$getEthSignedMessageHash"
  ): TypedContractMethod<[_messageHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "$getMessageHash"
  ): TypedContractMethod<[_data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "__hh_exposed_bytecode_marker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_nodes"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "addNode"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkSignature"
  ): TypedContractMethod<
    [_signature: SignatureVerifier.SignatureStruct],
    [SignatureVerifier.EncodedMessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTeam"
  ): TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateCallsToSelf"
  ): TypedContractMethod<
    [signature: SignatureVerifier.SignatureStruct, _calldata: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getNumberOfTeamsCreated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getParent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [teamId: BigNumberish, user: AddressLike, permission: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isNode"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "organisationOf"
  ): TypedContractMethod<[team: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "organisations"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "permissionsOfTeam"
  ): TypedContractMethod<
    [team: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermission"
  ): TypedContractMethod<
    [teamId: BigNumberish, user: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferToOrganisation"
  ): TypedContractMethod<
    [teamId: BigNumberish, orgId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PermissionsUpdated"
  ): TypedContractEvent<
    PermissionsUpdatedEvent.InputTuple,
    PermissionsUpdatedEvent.OutputTuple,
    PermissionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TeamCreated"
  ): TypedContractEvent<
    TeamCreatedEvent.InputTuple,
    TeamCreatedEvent.OutputTuple,
    TeamCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferToOrganisation"
  ): TypedContractEvent<
    TransferToOrganisationEvent.InputTuple,
    TransferToOrganisationEvent.OutputTuple,
    TransferToOrganisationEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PermissionsUpdated(uint256,address,uint8)": TypedContractEvent<
      PermissionsUpdatedEvent.InputTuple,
      PermissionsUpdatedEvent.OutputTuple,
      PermissionsUpdatedEvent.OutputObject
    >;
    PermissionsUpdated: TypedContractEvent<
      PermissionsUpdatedEvent.InputTuple,
      PermissionsUpdatedEvent.OutputTuple,
      PermissionsUpdatedEvent.OutputObject
    >;

    "TeamCreated(uint256,address)": TypedContractEvent<
      TeamCreatedEvent.InputTuple,
      TeamCreatedEvent.OutputTuple,
      TeamCreatedEvent.OutputObject
    >;
    TeamCreated: TypedContractEvent<
      TeamCreatedEvent.InputTuple,
      TeamCreatedEvent.OutputTuple,
      TeamCreatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferToOrganisation(uint256,uint256)": TypedContractEvent<
      TransferToOrganisationEvent.InputTuple,
      TransferToOrganisationEvent.OutputTuple,
      TransferToOrganisationEvent.OutputObject
    >;
    TransferToOrganisation: TypedContractEvent<
      TransferToOrganisationEvent.InputTuple,
      TransferToOrganisationEvent.OutputTuple,
      TransferToOrganisationEvent.OutputObject
    >;
  };
}
