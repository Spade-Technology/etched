/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { PayableOverrides } from "../../../common";
import type {
  $SignatureVerifier,
  $SignatureVerifierInterface,
} from "../../../contracts-exposed/CSignatureVerifier.sol/$SignatureVerifier";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nodeAddress",
            type: "address",
          },
        ],
        internalType: "struct SignatureVerifier.EncodedMessage",
        name: "_encodedMessage",
        type: "tuple",
      },
    ],
    name: "$checkMessageValidity",
    outputs: [
      {
        internalType: "bool",
        name: "ret0",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_messageHash",
        type: "bytes32",
      },
    ],
    name: "$getEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "ret0",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "$getMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "ret0",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "__hh_exposed_bytecode_marker",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "encodedMessage",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "messageHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
        ],
        internalType: "struct SignatureVerifier.Signature",
        name: "_signature",
        type: "tuple",
      },
    ],
    name: "checkSignature",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nodeAddress",
            type: "address",
          },
        ],
        internalType: "struct SignatureVerifier.EncodedMessage",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052610925806100136000396000f3fe60806040526004361061004e5760003560e01c80631a67bf941461005a578063313a99401461008f578063342db739146100d35780637b77958d14610107578063bc1facf41461012757600080fd5b3661005557005b600080fd5b34801561006657600080fd5b5061007a61007536600461061c565b610147565b60405190151581526020015b60405180910390f35b34801561009b57600080fd5b506100af6100aa366004610738565b610166565b60408051825181526020928301516001600160a01b03169281019290925201610086565b3480156100df57600080fd5b506100f96e1a185c991a185d0b595e1c1bdcd959608a1b81565b604051908152602001610086565b34801561011357600080fd5b506100f96101223660046107ea565b61029e565b34801561013357600080fd5b506100f9610142366004610803565b6102a9565b600061016061015b36849003840184610875565b6102f1565b92915050565b60408051808201909152600080825260208201526020820151825161019090805160209091012090565b146101f75760405162461bcd60e51b815260206004820152602c60248201527f546865206d657373616765206861736820646f65736e2774206d61746368207460448201526b6865206f726967696e616c2160a01b60648201526084015b60405180910390fd5b6000610206836020015161034f565b905060006102188285604001516103a2565b905083606001516001600160a01b0316816001600160a01b0316146102705760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064016101ee565b6000846000015180602001905181019061028a91906108ad565b9050610295816102f1565b50949350505050565b60006101608261034f565b60006102ea83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061034492505050565b9392505050565b6000438260000151101561033c5760405162461bcd60e51b815260206004820152601260248201527113595cdcd859d9481a5cc8195e1c1a5c995960721b60448201526064016101ee565b506001919050565b805160209091012090565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60008060006103b185856103c6565b915091506103be8161040b565b509392505050565b60008082516041036103fc5760208301516040840151606085015160001a6103f087828585610558565b94509450505050610404565b506000905060025b9250929050565b600081600481111561041f5761041f6108d9565b036104275750565b600181600481111561043b5761043b6108d9565b036104885760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101ee565b600281600481111561049c5761049c6108d9565b036104e95760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101ee565b60038160048111156104fd576104fd6108d9565b036105555760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101ee565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561058f5750600090506003610613565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156105e3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661060c57600060019250925050610613565b9150600090505b94509492505050565b60006040828403121561062e57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561066d5761066d610634565b60405290565b6040805190810167ffffffffffffffff8111828210171561066d5761066d610634565b600082601f8301126106a757600080fd5b813567ffffffffffffffff808211156106c2576106c2610634565b604051601f8301601f19908116603f011681019082821181831017156106ea576106ea610634565b8160405283815286602085880101111561070357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b038116811461055557600080fd5b60006020828403121561074a57600080fd5b813567ffffffffffffffff8082111561076257600080fd5b908301906080828603121561077657600080fd5b61077e61064a565b82358281111561078d57600080fd5b61079987828601610696565b825250602083013560208201526040830135828111156107b857600080fd5b6107c487828601610696565b604083015250606083013592506107da83610723565b6060810192909252509392505050565b6000602082840312156107fc57600080fd5b5035919050565b6000806020838503121561081657600080fd5b823567ffffffffffffffff8082111561082e57600080fd5b818501915085601f83011261084257600080fd5b81358181111561085157600080fd5b86602082850101111561086357600080fd5b60209290920196919550909350505050565b60006040828403121561088757600080fd5b61088f610673565b8235815260208301356108a181610723565b60208201529392505050565b6000604082840312156108bf57600080fd5b6108c7610673565b8251815260208301516108a181610723565b634e487b7160e01b600052602160045260246000fdfea264697066735822122009af9567769a445eefbee127d9dc26dcd157a9ebd7ddb8e2aec6c0733975545064736f6c63430008130033";

type $SignatureVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: $SignatureVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class $SignatureVerifier__factory extends ContractFactory {
  constructor(...args: $SignatureVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      $SignatureVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): $SignatureVerifier__factory {
    return super.connect(runner) as $SignatureVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): $SignatureVerifierInterface {
    return new Interface(_abi) as $SignatureVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): $SignatureVerifier {
    return new Contract(address, _abi, runner) as unknown as $SignatureVerifier;
  }
}
