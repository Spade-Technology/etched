/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SignatureVerifier {
  export type SignatureStruct = {
    encodedMessage: BytesLike;
    messageHash: BytesLike;
    signature: BytesLike;
    signer: AddressLike;
  };

  export type SignatureStructOutput = [
    encodedMessage: string,
    messageHash: string,
    signature: string,
    signer: string
  ] & {
    encodedMessage: string;
    messageHash: string;
    signature: string;
    signer: string;
  };
}

export interface TeamInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PayMaster"
      | "defaultPermissions"
      | "etch"
      | "getEffectivePermission"
      | "isOrganizationOwned"
      | "onERC721Received"
      | "owner"
      | "permissions"
      | "renounceOwnership"
      | "setDefaultPermission"
      | "setPayMaster"
      | "setPermission"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(functionFragment: "PayMaster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultPermissions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "etch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEffectivePermission",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrganizationOwned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultPermission",
    values: [SignatureVerifier.SignatureStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayMaster",
    values: [SignatureVerifier.SignatureStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [
      SignatureVerifier.SignatureStruct,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "PayMaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "etch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEffectivePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrganizationOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Team extends BaseContract {
  connect(runner?: ContractRunner | null): Team;
  waitForDeployment(): Promise<this>;

  interface: TeamInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PayMaster: TypedContractMethod<[], [string], "view">;

  defaultPermissions: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  etch: TypedContractMethod<[], [string], "view">;

  getEffectivePermission: TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  isOrganizationOwned: TypedContractMethod<[], [boolean], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  permissions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDefaultPermission: TypedContractMethod<
    [
      signature: SignatureVerifier.SignatureStruct,
      account: AddressLike,
      perm: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPayMaster: TypedContractMethod<
    [signature: SignatureVerifier.SignatureStruct, _paymaster: AddressLike],
    [void],
    "nonpayable"
  >;

  setPermission: TypedContractMethod<
    [
      signature: SignatureVerifier.SignatureStruct,
      account: AddressLike,
      tokenId: BigNumberish,
      perm: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PayMaster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultPermissions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "etch"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEffectivePermission"
  ): TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOrganizationOwned"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permissions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultPermission"
  ): TypedContractMethod<
    [
      signature: SignatureVerifier.SignatureStruct,
      account: AddressLike,
      perm: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPayMaster"
  ): TypedContractMethod<
    [signature: SignatureVerifier.SignatureStruct, _paymaster: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermission"
  ): TypedContractMethod<
    [
      signature: SignatureVerifier.SignatureStruct,
      account: AddressLike,
      tokenId: BigNumberish,
      perm: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
