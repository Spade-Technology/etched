/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SignatureVerifier {
  export type SignatureStruct = {
    encodedMessage: BytesLike;
    messageHash: BytesLike;
    signature: BytesLike;
    signer: AddressLike;
  };

  export type SignatureStructOutput = [
    encodedMessage: string,
    messageHash: string,
    signature: string,
    signer: string
  ] & {
    encodedMessage: string;
    messageHash: string;
    signature: string;
    signer: string;
  };

  export type EncodedMessageStruct = {
    blockNumber: BigNumberish;
    nodeAddress: AddressLike;
  };

  export type EncodedMessageStructOutput = [
    blockNumber: bigint,
    nodeAddress: string
  ] & { blockNumber: bigint; nodeAddress: string };
}

export interface SignatureVerifierInterface extends Interface {
  getFunction(nameOrSignature: "checkSignature"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [SignatureVerifier.SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
}

export interface SignatureVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): SignatureVerifier;
  waitForDeployment(): Promise<this>;

  interface: SignatureVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkSignature: TypedContractMethod<
    [_signature: SignatureVerifier.SignatureStruct],
    [SignatureVerifier.EncodedMessageStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkSignature"
  ): TypedContractMethod<
    [_signature: SignatureVerifier.SignatureStruct],
    [SignatureVerifier.EncodedMessageStructOutput],
    "view"
  >;

  filters: {};
}
