/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IEtches {
  export type SCommentsStruct = {
    commentIpfsCid: string;
    timestamp: BigNumberish;
  };

  export type SCommentsStructOutput = [
    commentIpfsCid: string,
    timestamp: bigint
  ] & { commentIpfsCid: string; timestamp: bigint };
}

export interface IEtchesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "commentOnEtch"
      | "getApproved"
      | "getTotalSupply"
      | "hasReadPermission"
      | "hasWritePermission"
      | "isApprovedForAll"
      | "ownerOf"
      | "safeMint"
      | "safeMintForTeam"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setIndividualPermissions"
      | "setMetadata"
      | "setTeamPermissions"
      | "supportsInterface"
      | "transferFrom"
      | "transferToTeam"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "CommentAdded"
      | "EtchCreated"
      | "EtchMetadataUpdated"
      | "EtchTransferedToTeam"
      | "InvididualPermissionsUpdated"
      | "TeamPermissionsUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commentOnEtch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasReadPermission",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasWritePermission",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMint",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMintForTeam",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndividualPermissions",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToTeam",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commentOnEtch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReadPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasWritePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeMintForTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndividualPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToTeam",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommentAddedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    commentId: BigNumberish,
    comment: IEtches.SCommentsStruct
  ];
  export type OutputTuple = [
    tokenId: bigint,
    commentId: bigint,
    comment: IEtches.SCommentsStructOutput
  ];
  export interface OutputObject {
    tokenId: bigint;
    commentId: bigint;
    comment: IEtches.SCommentsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EtchCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    to: AddressLike,
    ipfsCid: string,
    documentName: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    to: string,
    ipfsCid: string,
    documentName: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    to: string;
    ipfsCid: string;
    documentName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EtchMetadataUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    ipfsCid: string,
    documentName: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    ipfsCid: string,
    documentName: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    ipfsCid: string;
    documentName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EtchTransferedToTeamEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    from: AddressLike,
    to: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, from: string, to: bigint];
  export interface OutputObject {
    tokenId: bigint;
    from: string;
    to: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvididualPermissionsUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    account: AddressLike,
    newPermission: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    account: string,
    newPermission: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    account: string;
    newPermission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamPermissionsUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    teamId: BigNumberish,
    newPermission: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    teamId: bigint,
    newPermission: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    teamId: bigint;
    newPermission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEtches extends BaseContract {
  connect(runner?: ContractRunner | null): IEtches;
  waitForDeployment(): Promise<this>;

  interface: IEtchesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  commentOnEtch: TypedContractMethod<
    [tokenId: BigNumberish, commentIpfsCid: string],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getTotalSupply: TypedContractMethod<[], [bigint], "view">;

  hasReadPermission: TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  hasWritePermission: TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  safeMint: TypedContractMethod<
    [to: AddressLike, documentName: string, ipfsCid: string],
    [bigint],
    "nonpayable"
  >;

  safeMintForTeam: TypedContractMethod<
    [teamId: BigNumberish, documentName: string, ipfsCid: string],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setIndividualPermissions: TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMetadata: TypedContractMethod<
    [tokenId: BigNumberish, documentName: string, ipfsCid: string],
    [void],
    "nonpayable"
  >;

  setTeamPermissions: TypedContractMethod<
    [tokenId: BigNumberish, teamId: BigNumberish, permission: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferToTeam: TypedContractMethod<
    [tokenId: BigNumberish, teamId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "commentOnEtch"
  ): TypedContractMethod<
    [tokenId: BigNumberish, commentIpfsCid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasReadPermission"
  ): TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasWritePermission"
  ): TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeMint"
  ): TypedContractMethod<
    [to: AddressLike, documentName: string, ipfsCid: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeMintForTeam"
  ): TypedContractMethod<
    [teamId: BigNumberish, documentName: string, ipfsCid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIndividualPermissions"
  ): TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish, documentName: string, ipfsCid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTeamPermissions"
  ): TypedContractMethod<
    [tokenId: BigNumberish, teamId: BigNumberish, permission: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToTeam"
  ): TypedContractMethod<
    [tokenId: BigNumberish, teamId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CommentAdded"
  ): TypedContractEvent<
    CommentAddedEvent.InputTuple,
    CommentAddedEvent.OutputTuple,
    CommentAddedEvent.OutputObject
  >;
  getEvent(
    key: "EtchCreated"
  ): TypedContractEvent<
    EtchCreatedEvent.InputTuple,
    EtchCreatedEvent.OutputTuple,
    EtchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EtchMetadataUpdated"
  ): TypedContractEvent<
    EtchMetadataUpdatedEvent.InputTuple,
    EtchMetadataUpdatedEvent.OutputTuple,
    EtchMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EtchTransferedToTeam"
  ): TypedContractEvent<
    EtchTransferedToTeamEvent.InputTuple,
    EtchTransferedToTeamEvent.OutputTuple,
    EtchTransferedToTeamEvent.OutputObject
  >;
  getEvent(
    key: "InvididualPermissionsUpdated"
  ): TypedContractEvent<
    InvididualPermissionsUpdatedEvent.InputTuple,
    InvididualPermissionsUpdatedEvent.OutputTuple,
    InvididualPermissionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TeamPermissionsUpdated"
  ): TypedContractEvent<
    TeamPermissionsUpdatedEvent.InputTuple,
    TeamPermissionsUpdatedEvent.OutputTuple,
    TeamPermissionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CommentAdded(uint256,uint256,tuple)": TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;
    CommentAdded: TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;

    "EtchCreated(uint256,address,string,string)": TypedContractEvent<
      EtchCreatedEvent.InputTuple,
      EtchCreatedEvent.OutputTuple,
      EtchCreatedEvent.OutputObject
    >;
    EtchCreated: TypedContractEvent<
      EtchCreatedEvent.InputTuple,
      EtchCreatedEvent.OutputTuple,
      EtchCreatedEvent.OutputObject
    >;

    "EtchMetadataUpdated(uint256,string,string)": TypedContractEvent<
      EtchMetadataUpdatedEvent.InputTuple,
      EtchMetadataUpdatedEvent.OutputTuple,
      EtchMetadataUpdatedEvent.OutputObject
    >;
    EtchMetadataUpdated: TypedContractEvent<
      EtchMetadataUpdatedEvent.InputTuple,
      EtchMetadataUpdatedEvent.OutputTuple,
      EtchMetadataUpdatedEvent.OutputObject
    >;

    "EtchTransferedToTeam(uint256,address,uint256)": TypedContractEvent<
      EtchTransferedToTeamEvent.InputTuple,
      EtchTransferedToTeamEvent.OutputTuple,
      EtchTransferedToTeamEvent.OutputObject
    >;
    EtchTransferedToTeam: TypedContractEvent<
      EtchTransferedToTeamEvent.InputTuple,
      EtchTransferedToTeamEvent.OutputTuple,
      EtchTransferedToTeamEvent.OutputObject
    >;

    "InvididualPermissionsUpdated(uint256,address,uint8)": TypedContractEvent<
      InvididualPermissionsUpdatedEvent.InputTuple,
      InvididualPermissionsUpdatedEvent.OutputTuple,
      InvididualPermissionsUpdatedEvent.OutputObject
    >;
    InvididualPermissionsUpdated: TypedContractEvent<
      InvididualPermissionsUpdatedEvent.InputTuple,
      InvididualPermissionsUpdatedEvent.OutputTuple,
      InvididualPermissionsUpdatedEvent.OutputObject
    >;

    "TeamPermissionsUpdated(uint256,uint256,uint8)": TypedContractEvent<
      TeamPermissionsUpdatedEvent.InputTuple,
      TeamPermissionsUpdatedEvent.OutputTuple,
      TeamPermissionsUpdatedEvent.OutputObject
    >;
    TeamPermissionsUpdated: TypedContractEvent<
      TeamPermissionsUpdatedEvent.InputTuple,
      TeamPermissionsUpdatedEvent.OutputTuple,
      TeamPermissionsUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
