export default () => <div>hi</div>;

// import { signIn, useSession } from "next-auth/react";
// import Head from "next/head";
// import Link from "next/link";
// import { useState } from "react";
// import { lit } from "@/lit";
// import { api } from "@/utils/api";
// import * as LitJsSdk from "@lit-protocol/lit-node-client";
// import { UploadButton } from "@/utils/uploadthing";
// import { signOut } from "@/utils/hooks/useSignIn";

// const chain = "polygon";
// const accessControlConditions = [
//   {
//     contractAddress: "",
//     standardContractType: "",
//     chain,
//     method: "eth_getBalance",
//     parameters: [":userAddress", "latest"],
//     returnValueTest: {
//       comparator: ">=",
//       value: "10",
//     },
//   },
// ];

// export default function Home() {
//   const [text, setText] = useState("A new document");
//   const [file, setFile] = useState({});
//   const [anotherFile, setAnotherFile] = useState(true);

//   const { mutate, data: ipfsCid, isLoading } = api.example.postLitDocument.useMutation();

//   const sentToLit = async () => {
//     await lit.connect();

//     if (!lit.client || !file || !(file as any)?.fileUrl) return;

//     const authSig = await LitJsSdk.checkAndSignAuthMessage({ chain });

//     mutate({
//       chain,
//       authSig,
//       title: text,
//       file_link: (file as any)?.fileUrl,
//       accessControlConditions,
//     });
//   };

//   const decrypt = async () => {
//     await lit.connect();
//     if (!lit.client || !ipfsCid) return;

//     const authSig = await LitJsSdk.checkAndSignAuthMessage({ chain });

//     const decryptedArrayBuffer = await LitJsSdk.decryptFromIpfs({
//       authSig,
//       ipfsCid: ipfsCid, // This is returned from the above encryption
//       litNodeClient: lit.client as any,
//     }).catch((e) => {
//       if (e.errorKind == "Validation") alert("You are not authorized to view this document");
//       else alert("Something went wrong");
//     });

//     if (!decryptedArrayBuffer) return;

//     // download the file
//     const blob = new Blob([decryptedArrayBuffer], {
//       type: "application/octet-stream",
//     });

//     const url = URL.createObjectURL(blob);

//     const a = document.createElement("a");
//     a.href = url;
//     a.download = "decrypted.txt";
//     document.body.appendChild(a);
//     a.click();

//     return {};
//   };

//   return (
//     <>
//       <Head>
//         <title>Encrypt</title>
//         <meta name="description" content="Generated by create-t3-app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//       <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
//         <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 "></div>
//         <div className="mb-5 flex flex-col gap-4">
//           <div className="rounded-sm bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20 disabled:opacity-50">
//             {anotherFile ? (
//               <UploadButton
//                 endpoint="EtchUpload"
//                 onClientUploadComplete={(res) => {
//                   setFile(res?.[0] || {});
//                   setAnotherFile(false);
//                 }}
//               />
//             ) : (
//               <>
//                 <button
//                   className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20 disabled:opacity-50"
//                   onClick={() => setAnotherFile(true)}
//                 >
//                   + Change File
//                 </button>
//                 <p className="text-md mt-5 text-center text-white">current: {(file as any)?.fileKey?.slice(37)}</p>
//               </>
//             )}
//           </div>
//           {/* <input
//             type="file"
//             onChange={onFileAdded}
//             className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//           /> */}
//           <button
//             className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20 disabled:opacity-50"
//             onClick={() => sentToLit()}
//             disabled={isLoading}
//           >
//             Encrypt and Post
//           </button>
//         </div>
//         <button
//           className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20 disabled:opacity-50"
//           onClick={() => decrypt()}
//           disabled={!ipfsCid || isLoading}
//         >
//           Decrypt
//         </button>
//         <p className="text-md mt-5 text-center text-white">
//           Current decryption rules: 10 Wei MATIC (0.0₁₇10) in the connected wallet
//         </p>
//       </main>
//     </>
//   );
// }

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
