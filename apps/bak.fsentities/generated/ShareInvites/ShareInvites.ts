// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class InviteAccepted extends ethereum.Event {
  get params(): InviteAccepted__Params {
    return new InviteAccepted__Params(this);
  }
}

export class InviteAccepted__Params {
  _event: InviteAccepted;

  constructor(event: InviteAccepted) {
    this._event = event;
  }

  get inviteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get acceptedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InviteDeclined extends ethereum.Event {
  get params(): InviteDeclined__Params {
    return new InviteDeclined__Params(this);
  }
}

export class InviteDeclined__Params {
  _event: InviteDeclined;

  constructor(event: InviteDeclined) {
    this._event = event;
  }

  get inviteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get declinedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InviteRevoked extends ethereum.Event {
  get params(): InviteRevoked__Params {
    return new InviteRevoked__Params(this);
  }
}

export class InviteRevoked__Params {
  _event: InviteRevoked;

  constructor(event: InviteRevoked) {
    this._event = event;
  }

  get inviteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get revokedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InviteSent extends ethereum.Event {
  get params(): InviteSent__Params {
    return new InviteSent__Params(this);
  }
}

export class InviteSent__Params {
  _event: InviteSent;

  constructor(event: InviteSent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get externalOrgOrTeamId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sourceEntityId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get baseSharePerms(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get status(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ShareInvites__checkSignatureResultValue0Struct extends ethereum.Tuple {
  get blockNumber(): BigInt {
    return this[0].toBigInt();
  }

  get nodeAddress(): Address {
    return this[1].toAddress();
  }
}

export class ShareInvites__checkSignatureInput_signatureStruct extends ethereum.Tuple {
  get encodedMessage(): Bytes {
    return this[0].toBytes();
  }

  get messageHash(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get signer(): Address {
    return this[3].toAddress();
  }
}

export class ShareInvites__invitesResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getFrom(): Address {
    return this.value1;
  }

  getExternalOrgOrTeamId(): BigInt {
    return this.value2;
  }

  getSourceEntityId(): BigInt {
    return this.value3;
  }

  getBaseSharePerms(): i32 {
    return this.value4;
  }

  getStatus(): i32 {
    return this.value5;
  }
}

export class ShareInvites extends ethereum.SmartContract {
  static bind(address: Address): ShareInvites {
    return new ShareInvites("ShareInvites", address);
  }

  _nodes(node: Address): boolean {
    let result = super.call("_nodes", "_nodes(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);

    return result[0].toBoolean();
  }

  try__nodes(node: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_nodes", "_nodes(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkSignature(
    _signature: ShareInvites__checkSignatureInput_signatureStruct
  ): ShareInvites__checkSignatureResultValue0Struct {
    let result = super.call(
      "checkSignature",
      "checkSignature((bytes,bytes32,bytes,address)):((uint256,address))",
      [ethereum.Value.fromTuple(_signature)]
    );

    return changetype<ShareInvites__checkSignatureResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_checkSignature(
    _signature: ShareInvites__checkSignatureInput_signatureStruct
  ): ethereum.CallResult<ShareInvites__checkSignatureResultValue0Struct> {
    let result = super.tryCall(
      "checkSignature",
      "checkSignature((bytes,bytes32,bytes,address)):((uint256,address))",
      [ethereum.Value.fromTuple(_signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ShareInvites__checkSignatureResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  entities(): Address {
    let result = super.call("entities", "entities():(address)", []);

    return result[0].toAddress();
  }

  try_entities(): ethereum.CallResult<Address> {
    let result = super.tryCall("entities", "entities():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getParent(): Address {
    let result = super.call("getParent", "getParent():(address)", []);

    return result[0].toAddress();
  }

  try_getParent(): ethereum.CallResult<Address> {
    let result = super.tryCall("getParent", "getParent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalSupply(): BigInt {
    let result = super.call("getTotalSupply", "getTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  invites(invite: BigInt): ShareInvites__invitesResult {
    let result = super.call(
      "invites",
      "invites(uint256):(uint256,address,uint256,uint256,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(invite)]
    );

    return new ShareInvites__invitesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toI32()
    );
  }

  try_invites(
    invite: BigInt
  ): ethereum.CallResult<ShareInvites__invitesResult> {
    let result = super.tryCall(
      "invites",
      "invites(uint256):(uint256,address,uint256,uint256,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(invite)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShareInvites__invitesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toI32()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNode(node: Address): boolean {
    let result = super.call("isNode", "isNode(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);

    return result[0].toBoolean();
  }

  try_isNode(node: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNode", "isNode(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get entityManagerContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptInviteCall extends ethereum.Call {
  get inputs(): AcceptInviteCall__Inputs {
    return new AcceptInviteCall__Inputs(this);
  }

  get outputs(): AcceptInviteCall__Outputs {
    return new AcceptInviteCall__Outputs(this);
  }
}

export class AcceptInviteCall__Inputs {
  _call: AcceptInviteCall;

  constructor(call: AcceptInviteCall) {
    this._call = call;
  }

  get _inviteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptInviteCall__Outputs {
  _call: AcceptInviteCall;

  constructor(call: AcceptInviteCall) {
    this._call = call;
  }
}

export class AddNodeCall extends ethereum.Call {
  get inputs(): AddNodeCall__Inputs {
    return new AddNodeCall__Inputs(this);
  }

  get outputs(): AddNodeCall__Outputs {
    return new AddNodeCall__Outputs(this);
  }
}

export class AddNodeCall__Inputs {
  _call: AddNodeCall;

  constructor(call: AddNodeCall) {
    this._call = call;
  }

  get node(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddNodeCall__Outputs {
  _call: AddNodeCall;

  constructor(call: AddNodeCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CheckSignatureCall extends ethereum.Call {
  get inputs(): CheckSignatureCall__Inputs {
    return new CheckSignatureCall__Inputs(this);
  }

  get outputs(): CheckSignatureCall__Outputs {
    return new CheckSignatureCall__Outputs(this);
  }
}

export class CheckSignatureCall__Inputs {
  _call: CheckSignatureCall;

  constructor(call: CheckSignatureCall) {
    this._call = call;
  }

  get _signature(): CheckSignatureCall_signatureStruct {
    return changetype<CheckSignatureCall_signatureStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CheckSignatureCall__Outputs {
  _call: CheckSignatureCall;

  constructor(call: CheckSignatureCall) {
    this._call = call;
  }

  get value0(): CheckSignatureCallValue0Struct {
    return changetype<CheckSignatureCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class CheckSignatureCall_signatureStruct extends ethereum.Tuple {
  get encodedMessage(): Bytes {
    return this[0].toBytes();
  }

  get messageHash(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get signer(): Address {
    return this[3].toAddress();
  }
}

export class CheckSignatureCallValue0Struct extends ethereum.Tuple {
  get blockNumber(): BigInt {
    return this[0].toBigInt();
  }

  get nodeAddress(): Address {
    return this[1].toAddress();
  }
}

export class DeclineInviteCall extends ethereum.Call {
  get inputs(): DeclineInviteCall__Inputs {
    return new DeclineInviteCall__Inputs(this);
  }

  get outputs(): DeclineInviteCall__Outputs {
    return new DeclineInviteCall__Outputs(this);
  }
}

export class DeclineInviteCall__Inputs {
  _call: DeclineInviteCall;

  constructor(call: DeclineInviteCall) {
    this._call = call;
  }

  get _inviteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeclineInviteCall__Outputs {
  _call: DeclineInviteCall;

  constructor(call: DeclineInviteCall) {
    this._call = call;
  }
}

export class DelegateCallsToSelfCall extends ethereum.Call {
  get inputs(): DelegateCallsToSelfCall__Inputs {
    return new DelegateCallsToSelfCall__Inputs(this);
  }

  get outputs(): DelegateCallsToSelfCall__Outputs {
    return new DelegateCallsToSelfCall__Outputs(this);
  }
}

export class DelegateCallsToSelfCall__Inputs {
  _call: DelegateCallsToSelfCall;

  constructor(call: DelegateCallsToSelfCall) {
    this._call = call;
  }

  get signature(): DelegateCallsToSelfCallSignatureStruct {
    return changetype<DelegateCallsToSelfCallSignatureStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _calldata(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class DelegateCallsToSelfCall__Outputs {
  _call: DelegateCallsToSelfCall;

  constructor(call: DelegateCallsToSelfCall) {
    this._call = call;
  }
}

export class DelegateCallsToSelfCallSignatureStruct extends ethereum.Tuple {
  get encodedMessage(): Bytes {
    return this[0].toBytes();
  }

  get messageHash(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get signer(): Address {
    return this[3].toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeInviteCall extends ethereum.Call {
  get inputs(): RevokeInviteCall__Inputs {
    return new RevokeInviteCall__Inputs(this);
  }

  get outputs(): RevokeInviteCall__Outputs {
    return new RevokeInviteCall__Outputs(this);
  }
}

export class RevokeInviteCall__Inputs {
  _call: RevokeInviteCall;

  constructor(call: RevokeInviteCall) {
    this._call = call;
  }

  get _inviteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeInviteCall__Outputs {
  _call: RevokeInviteCall;

  constructor(call: RevokeInviteCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SendInviteCall extends ethereum.Call {
  get inputs(): SendInviteCall__Inputs {
    return new SendInviteCall__Inputs(this);
  }

  get outputs(): SendInviteCall__Outputs {
    return new SendInviteCall__Outputs(this);
  }
}

export class SendInviteCall__Inputs {
  _call: SendInviteCall;

  constructor(call: SendInviteCall) {
    this._call = call;
  }

  get _externalOrgOrTeamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sourceEntityId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _baseSharePerms(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SendInviteCall__Outputs {
  _call: SendInviteCall;

  constructor(call: SendInviteCall) {
    this._call = call;
  }
}

export class SendInviteToIndividualCall extends ethereum.Call {
  get inputs(): SendInviteToIndividualCall__Inputs {
    return new SendInviteToIndividualCall__Inputs(this);
  }

  get outputs(): SendInviteToIndividualCall__Outputs {
    return new SendInviteToIndividualCall__Outputs(this);
  }
}

export class SendInviteToIndividualCall__Inputs {
  _call: SendInviteToIndividualCall;

  constructor(call: SendInviteToIndividualCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sourceEntityId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _baseSharePerms(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SendInviteToIndividualCall__Outputs {
  _call: SendInviteToIndividualCall;

  constructor(call: SendInviteToIndividualCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
