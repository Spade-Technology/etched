## WALLET ENTITY ##

type Wallet {
  id: String!
  ownedEtches: [EtchOwnership!] 
  ownedTeams: [TeamOwnership!] 
  ownedorganisations: [OrganisationOwnership!] 
  teamApprovals: [TeamApproval!] 
  OrganisationApprovals: [OrganisationApproval!] 
  etchPermissions: [EtchPermission!] 
  teamPermissions: [TeamPermission!] 
  OrganisationPermissions: [OrganisationPermission!] 
}

## ETCH, TEAM, organisation ENTITIES ##

type Etch {
  id: ID!
  tokenId: Int!
  ownership: EtchOwnership! 
  permissions: [EtchPermission!] 
  comments: [EtchCommentAdded!] 
  transfers: [EtchTransfer!] 
  approvals: [EtchApproval!] 

  ipfsCid: String!
  documentName: String!
}

type Team {
  id: ID!
  teamId: Int!
  ownership: TeamOwnership! 
  permissions: [TeamPermission!] 
  managedEtches: [EtchOwnership!] 
  externalEtches: [EtchPermission!] 
  transfers: [TeamTransfer!] 
  approvals: [TeamApproval!] 
}

type Organisation {
  id: ID!
  orgId: Int!
  ownership: OrganisationOwnership! 
  permissions: [OrganisationPermission!] 
  managedTeams: [TeamOwnership!] 
  transfers: [OrganisationTransfer!] 
  approvals: [OrganisationApproval!] 
}

## OWNERSHIP CHAIN ENTITIES ##

type EtchOwnership {
  id: ID!
  etch: Etch!

  owner: Wallet
  team: Team
}

type TeamOwnership {
  id: ID!
  team: Team!

  owner: Wallet
  organisation: Organisation
}

type OrganisationOwnership {
  id: ID!
  organisation: Organisation!

  owner: Wallet
}

## PERMISSION CHAIN ENTITIES ##

type EtchPermission {
  id: ID!
  etch: Etch!
  wallet: Wallet
  team: Team
  permissionLevel: Int! # uint8, possibly Enum
}

type TeamPermission {
  id: ID!
  team: Team!
  wallet: Wallet!
  permissionLevel: Int! # uint8, possibly Enum
}

type OrganisationPermission {
  id: ID!
  organisation: Organisation!
  wallet: Wallet!
  permissionLevel: Int! # uint8, possibly Enum
}

## ETCH EVENTS ##

type EtchApproval {
  id: String!
  owner: String! # address
  approved: String! # address
  tokenId: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  etch: Etch!
}

type EtchApprovalForAll {
  id: String!
  owner: String! # address
  operator: String! # address
  approved: Boolean! # bool
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  etch: Etch!
}

type EtchCommentAdded {
  id: String!
  tokenId: Int! # uint256
  commentId: Int! # uint256
  comment_commentIpfsCid: String! # String
  comment_timestamp: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  etch: Etch!
}

type EtchCreated {
  id: String!
  tokenId: Int! # uint256
  to: String! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!
}

type EtchTransferedToTeam {
  id: String!
  tokenId: Int! # uint256
  from: String! # address
  to: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!
}

type EtchTeamPermissionsUpdated {
  id: String!
  tokenId: Int! # uint256
  teamId: Int! # uint256
  newPermission: Int! # uint8
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!
}

type EtchPermissionsUpdated {
  id: String!
  tokenId: Int! # uint256
  account: String! # address
  newPermission: Int! # uint8
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!
}

type EtchOwnershipTransferred {
  id: String!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!
}

type EtchTransfer {
  id: String!
  from: String! # address
  to: String! # address
  tokenId: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  etch: Etch!
}

## TEAM EVENTS ##

type TeamApproval {
  id: String!
  owner: String! # address
  approved: String! # address
  tokenId: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  team: Team!
  wallet: Wallet!
}

type TeamApprovalForAll {
  id: String!
  owner: String! # address
  operator: String! # address
  approved: Boolean! # bool
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  team: Team!
}

type TeamOwnershipTransferred {
  id: String!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  team: Team!
}

type TeamPermissionsUpdated {
  id: String!
  teamId: Int! # uint256
  account: String! # address
  newPermission: Int! # uint8
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  team: Team!
}

type TeamCreated {
  id: String!
  teamId: Int! # uint256
  to: String! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  team: Team!
}

type TeamTransfer {
  id: String!
  from: String! # address
  to: String! # address
  tokenId: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  team: Team!
}

type TeamTransferToOrganisation {
  id: String!
  teamId: Int! # uint256
  orgId: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  team: Team!
  organisation: Organisation!
}

## ORGANISATION EVENTS ##

type OrganisationApproval {
  id: String!
  owner: String! # address
  approved: String! # address
  tokenId: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  organisation: Organisation!
  wallet: Wallet!
}

type OrganisationApprovalForAll {
  id: String!
  owner: String! # address
  operator: String! # address
  approved: Boolean! # bool
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  organisation: Organisation!
}

type OrganisationCreated {
  id: String!
  orgId: Int! # uint256
  to: String! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  organisation: Organisation!
}

type OrganisationContractOwnershipTransferred {
  id: String!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!
}

type OrganisationPermissionsUpdated {
  id: String!
  orgId: Int! # uint256
  account: String! # address
  newPermission: Int! # uint8
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  organisation: Organisation!
}

type OrganisationTransfer {
  id: String!
  from: String! # address
  to: String! # address
  tokenId: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: String!

  organisation: Organisation!
}
