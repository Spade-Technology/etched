// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class EtchCreated extends ethereum.Event {
  get params(): EtchCreated__Params {
    return new EtchCreated__Params(this);
  }
}

export class EtchCreated__Params {
  _event: EtchCreated;

  constructor(event: EtchCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Etch__metadataOfResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getDocumentName(): string {
    return this.value1;
  }

  getIpfsCid(): string {
    return this.value2;
  }

  getCommentsCount(): BigInt {
    return this.value3;
  }

  getTimestamp(): BigInt {
    return this.value4;
  }
}

export class Etch extends ethereum.SmartContract {
  static bind(address: Address): Etch {
    return new Etch("Etch", address);
  }

  _nodes(node: Address): boolean {
    let result = super.call("_nodes", "_nodes(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);

    return result[0].toBoolean();
  }

  try__nodes(node: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_nodes", "_nodes(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getParent(): Address {
    let result = super.call("getParent", "getParent():(address)", []);

    return result[0].toAddress();
  }

  try_getParent(): ethereum.CallResult<Address> {
    let result = super.tryCall("getParent", "getParent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasReadPermission(account: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "hasReadPermission",
      "hasReadPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasReadPermission(
    account: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasReadPermission",
      "hasReadPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasWritePermission(account: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "hasWritePermission",
      "hasWritePermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasWritePermission(
    account: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasWritePermission",
      "hasWritePermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  individualPermissionsOf(etch: BigInt, user: Address): i32 {
    let result = super.call(
      "individualPermissionsOf",
      "individualPermissionsOf(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(etch),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toI32();
  }

  try_individualPermissionsOf(
    etch: BigInt,
    user: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "individualPermissionsOf",
      "individualPermissionsOf(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(etch),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNode(node: Address): boolean {
    let result = super.call("isNode", "isNode(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);

    return result[0].toBoolean();
  }

  try_isNode(node: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNode", "isNode(address):(bool)", [
      ethereum.Value.fromAddress(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataOf(etch: BigInt): Etch__metadataOfResult {
    let result = super.call(
      "metadataOf",
      "metadataOf(uint256):(address,string,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(etch)]
    );

    return new Etch__metadataOfResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_metadataOf(etch: BigInt): ethereum.CallResult<Etch__metadataOfResult> {
    let result = super.tryCall(
      "metadataOf",
      "metadataOf(uint256):(address,string,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(etch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Etch__metadataOfResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  teamOf(etch: BigInt): BigInt {
    let result = super.call("teamOf", "teamOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(etch)
    ]);

    return result[0].toBigInt();
  }

  try_teamOf(etch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("teamOf", "teamOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(etch)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teams(): Address {
    let result = super.call("teams", "teams():(address)", []);

    return result[0].toAddress();
  }

  try_teams(): ethereum.CallResult<Address> {
    let result = super.tryCall("teams", "teams():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get teamsContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddNodeCall extends ethereum.Call {
  get inputs(): AddNodeCall__Inputs {
    return new AddNodeCall__Inputs(this);
  }

  get outputs(): AddNodeCall__Outputs {
    return new AddNodeCall__Outputs(this);
  }
}

export class AddNodeCall__Inputs {
  _call: AddNodeCall;

  constructor(call: AddNodeCall) {
    this._call = call;
  }

  get node(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddNodeCall__Outputs {
  _call: AddNodeCall;

  constructor(call: AddNodeCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CommentOnEtchCall extends ethereum.Call {
  get inputs(): CommentOnEtchCall__Inputs {
    return new CommentOnEtchCall__Inputs(this);
  }

  get outputs(): CommentOnEtchCall__Outputs {
    return new CommentOnEtchCall__Outputs(this);
  }
}

export class CommentOnEtchCall__Inputs {
  _call: CommentOnEtchCall;

  constructor(call: CommentOnEtchCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get commentIpfsCid(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CommentOnEtchCall__Outputs {
  _call: CommentOnEtchCall;

  constructor(call: CommentOnEtchCall) {
    this._call = call;
  }
}

export class DelegateCallsToSelfCall extends ethereum.Call {
  get inputs(): DelegateCallsToSelfCall__Inputs {
    return new DelegateCallsToSelfCall__Inputs(this);
  }

  get outputs(): DelegateCallsToSelfCall__Outputs {
    return new DelegateCallsToSelfCall__Outputs(this);
  }
}

export class DelegateCallsToSelfCall__Inputs {
  _call: DelegateCallsToSelfCall;

  constructor(call: DelegateCallsToSelfCall) {
    this._call = call;
  }

  get signature(): DelegateCallsToSelfCallSignatureStruct {
    return changetype<DelegateCallsToSelfCallSignatureStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _calldata(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class DelegateCallsToSelfCall__Outputs {
  _call: DelegateCallsToSelfCall;

  constructor(call: DelegateCallsToSelfCall) {
    this._call = call;
  }
}

export class DelegateCallsToSelfCallSignatureStruct extends ethereum.Tuple {
  get encodedMessage(): Bytes {
    return this[0].toBytes();
  }

  get messageHash(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get signer(): Address {
    return this[3].toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get documentName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get ipfsCid(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeMintForTeamCall extends ethereum.Call {
  get inputs(): SafeMintForTeamCall__Inputs {
    return new SafeMintForTeamCall__Inputs(this);
  }

  get outputs(): SafeMintForTeamCall__Outputs {
    return new SafeMintForTeamCall__Outputs(this);
  }
}

export class SafeMintForTeamCall__Inputs {
  _call: SafeMintForTeamCall;

  constructor(call: SafeMintForTeamCall) {
    this._call = call;
  }

  get teamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get documentName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get ipfsCid(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SafeMintForTeamCall__Outputs {
  _call: SafeMintForTeamCall;

  constructor(call: SafeMintForTeamCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetIndividualPermissionsCall extends ethereum.Call {
  get inputs(): SetIndividualPermissionsCall__Inputs {
    return new SetIndividualPermissionsCall__Inputs(this);
  }

  get outputs(): SetIndividualPermissionsCall__Outputs {
    return new SetIndividualPermissionsCall__Outputs(this);
  }
}

export class SetIndividualPermissionsCall__Inputs {
  _call: SetIndividualPermissionsCall;

  constructor(call: SetIndividualPermissionsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get permission(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SetIndividualPermissionsCall__Outputs {
  _call: SetIndividualPermissionsCall;

  constructor(call: SetIndividualPermissionsCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferToTeamCall extends ethereum.Call {
  get inputs(): TransferToTeamCall__Inputs {
    return new TransferToTeamCall__Inputs(this);
  }

  get outputs(): TransferToTeamCall__Outputs {
    return new TransferToTeamCall__Outputs(this);
  }
}

export class TransferToTeamCall__Inputs {
  _call: TransferToTeamCall;

  constructor(call: TransferToTeamCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get teamId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferToTeamCall__Outputs {
  _call: TransferToTeamCall;

  constructor(call: TransferToTeamCall) {
    this._call = call;
  }
}
